name: CI

on:
  push:
    branches:
        - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
        - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  setup:
    name: Setup
    outputs: 
      branch: ${{ steps.branch_name.outputs.current_branch }}
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        id: branch_name
        uses: tj-actions/branch-names@v8

  create_neon_branch:
    name: Create Neon Branch
    outputs:
      db_url: ${{ steps.create_neon_branch.outputs.db_url }}
      db_url_with_pooler: ${{ steps.create_neon_branch.outputs.db_url_with_pooler }}
    needs: setup
    if: |
      github.event_name == 'pull_request' && (
        github.event.action == 'synchronize'
        || github.event.action == 'opened'
        || github.event.action == 'reopened')
    runs-on: ubuntu-latest
    steps:
      - name: Get branch expiration date (2 weeks from now)
        id: get_expiration_date
        run: echo "EXPIRES_AT=$(date -u --date '+14 days' +'%Y-%m-%dT%H:%M:%SZ')" >> "$GITHUB_ENV"
      
      - name: Create Neon Branch
        id: create_neon_branch
        uses: neondatabase/create-branch-action@v6
        with: 
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch_name: preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}
          expires_at: ${{ env.EXPIRES_AT }}

  delete_neon_branch:
    name: Delete Neon Branch
    needs: setup
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Delete Neon Branch
        uses: neondatabase/delete-branch-action@v3
        with:
            project_id: ${{ vars.NEON_PROJECT_ID }}
            branch: preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}
            api_key: ${{ secrets.NEON_API_KEY }}

  backend:
    runs-on: ubuntu-latest
    needs: create_neon_branch
    if: needs.create_neon_branch.result == 'success' || needs.create_neon_branch.result == 'skipped'
    strategy:
      matrix:
        python-version: [3.11, 3.13]
    defaults:
      run:
        working-directory: backend
    env:
      DJANGO_SETTINGS_MODULE: adaptive_testing.settings.ci
      SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY || 'ci-secret-key-for-testing-only' }}
      DEBUG: false
      CORS_ALLOWED_ORIGINS: http://localhost:5173,http://127.0.0.1:5173
      DATABASE_URL: ${{ needs.create_neon_branch.outputs.db_url_with_pooler || '' }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Run linting
        run: poetry run ruff check .
      - name: Run type checking
        run: poetry run mypy .
      - name: Run migrations
        run: poetry run python manage.py migrate --settings=adaptive_testing.settings.ci
      - name: Run tests
        run: poetry run pytest --cov=adaptive_testing --cov=apps --cov-report=xml --cov-report=html --ds=adaptive_testing.settings.ci
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install dependencies
        run: npm ci
      - name: Run linting
        run: npm run lint
      - name: Run tests
        run: npm run test:run
      - name: Build
        run: npm run build

  security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # GitLeaks - Secret scanning
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      
      # CodeQL - Static analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
      
      # Actionlint - GitHub Actions security
      # - name: Run Actionlint
      #   uses: rhysd/actionlint@v1.7.0
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     fail_on_error: true
