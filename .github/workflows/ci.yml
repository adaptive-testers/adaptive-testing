name: CI

on:
  push:
    branches:
        - main
  pull_request:
    branches:
        - main

jobs:
  backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.13]
    defaults:
      run:
        working-directory: backend
    env:
      SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      DEBUG: false
      DATABASE_URL: ${{ secrets.DATABASE_URL || 'sqlite:///db.sqlite3' }}
      CORS_ALLOWED_ORIGINS: http://localhost:5173,http://127.0.0.1:5173
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install project
        run: poetry install --no-interaction
      - name: Run linting
        run: poetry run ruff check .
      - name: Run type checking
        run: poetry run mypy .
      - name: Run migrations
        run: poetry run python manage.py migrate
      - name: Run tests
        run: poetry run pytest --cov=adaptive_testing --cov=apps --cov-report=xml --cov-report=html
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install dependencies
        run: npm ci
      - name: Run linting
        run: npm run lint
      - name: Run tests
        run: npm run test:run
      - name: Build
        run: npm run build

  security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # GitLeaks - Secret scanning
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      
      # CodeQL - Static analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
      
      # Actionlint - GitHub Actions security
      - name: Run Actionlint
        uses: rhysd/actionlint@v1.7.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_error: true